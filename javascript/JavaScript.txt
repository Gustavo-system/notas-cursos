						JAVASCRIPT

					***** Variables *****
var ->se utiliza la palabra reservada 

->Tipo de datos Primitivos
numerico	= var varibale = 1;
string		= var varibale = 'texto';
boolean		= var varibale = true / false;
undefined	= var varibale;
null		= var varibale = null;
					
					***** Comentarios *****
//	= comentario de una sola linea
/* */	= comentario de multiples lineas
			
					***** Conversion de Variables y Mutacio *****
->las variables son dinamicas
edad = 20; 
edad = veinte;

					***** Salida de texto *****
->console.log('texto')
*concatenacion se utiliza el simbolo de (+)

					***** Operadores Matematicos *****
suma			+
resta			-
multiplicacion		*
divicion		/
modulo			%
potencia		**
					***** Operadores unarios aritmeticos *****

incremento		++
decremento		--

					***** Operadores Logicos *****
and	&&
or	||

					***** Operadores de comparacion *****

mayor		>
menor		<
mayor igual	>=	
menor igual	<=
igual		==
distinto	!=
exicto igual	===
					***** Operadores de asignacion *****
asignacion		=
suma y asignacion	+=
substraccion 		-=
multiplicacion 		*=
divicion 		/=

					***** TypeOf *****
muestra el tipo de dato que le fue asignado a la variable por ejemplo: console.log(typeof variable);
					
					***** Sentencias de comparacion *****
if (condicion){
	bloque de codigo;
}
else {
	bloque de codigo;
}

//if anidado o else if
if (condicion){
	bloque de codigo
}
else if (condicion){
	bloque de codigo
}
else{
	bloque de codigo
}

					***** Operador ternario *****
sintaxis
condicion ? bloque de codigo correcto : bloque de codigo error;

					***** Switch *****

switch (condicion){
	case valor: 
		bloque de codigo
		break;
	
	case valor: 
		bloque de codigo
		break;
	
	case valor: 
		bloque de codigo
		break;
	
	default: 
		bloque de codigo
}

					***** ciclos *****

for (let i i opeadorComparacion numero; i operadoComparacion numero; incremento/decremento){
	bloque de codigo
}

while (condicion){
	bloque de codigo
	operador unario aritmetico;
}

do {
	bloque de codigo
}while(condicion)



					***** FUNCIONES *****

funtion nombreFuncion (){
	bloque de codigo
}

funtion nombreFuncion(parametros){
	bloque de codigo
	return valor a retornar; 
}

llamamos la funcion 	->nombreFuncion();

					*****funciones como expreciones *****
funtion(){
	bloque de codigo;
}

se declara un variable y se le asigna la funcion

let variable = funtion(){
	bloque de codigo;
	puede llevar return como funcion normal
}

puede llevar parametros

					***** ARGUMENTOS POR DEFECTO *****

se coloca en la deficicion de la funcion
funtion nombreFuncion(a, b, c=3){
	return a + b + c;
}

el valor de 3 lo toma si no utiliza o se le pasa un valor, sin embargo si se le pasa un valor su valor por defecto sera remplazado


					***** ARREGLOS Y OBJETOS *****

-> Arreglos

var nombreArreglo = ["valor1", "valor2", ...];
var nombreArreglo = new Array("valor1","valor2", ...);

indice -> nombre[posicion];
tamaño -> .length

//recorrer areglos con for y foreach

var frutas = new Array('pera','aguacate', 'mazapan', 'platano');

for(var i = 0; i<=frutas.length-1; i++){
  console.log(frutas[i]);
}

//ejemplo de como recorrer un array con foreach
frutas.forEach(function(elemento, indice, array){
  console.log(++indice, elemento);
});

agregar elementos a un array al final
nombreArray.push('elemento');
agregar un elemento al inicio
nombreArray.unshift('elemento');

quitar elemento al final
nombreArray.pop();
quitar elemeto al inicio
nombreArray.shift();
eliminar el elemento en cualquier posicion
nombreArray.splice(indice, numeros de elementos a borrar)
hacer el reverso del array
nombreArray.reverse();

saber la posicion del elemento
var pos = nombreArray.indexOf('elemento a Buscar');

-> Array con diferentes tipos
var nombreArray = ['valor1', 'valor2', valor3, valor4, ...];


//Creando Objetos de forma literal
var nombreObjeto = {
	propiedades del objeto;
};

p/e:

var personas = {
	nombre : 'Gustavo',
};

//objetos con la sintaxis object
-> por ejemplo

var nombreObjeto = new Object();

nombreObjeto.atributo = valor;
ejemplo:
persona.nombre = 'Ana';

				***** DOM *****
->obtener datos por el id
getElmentById
->cambiar datos por id
elemento.TextContent = valor;
elemento.innerText = valor;
elemento.innerHTML = <h3>Hola</h3>;

->getElementsByClassName
	se pueden aplicar los mismo metodos de id
	devuelve los valores como un array y para manipularlos se utilza el indice
	
->getElementsByTagName
	se puede hacer lo mismo que en los demas

->querySelector();
	var variable =  document.querySelector(#id);
	podemos manipular los valores del archivo seleccionado pero selecciona el primer elemento que encuentre
	p/e: variable.style.bordeButton = 'solid 4px #000';
	var variable =  document.querySelector('etiqueta[type="type"]');
	para cambiar el valor de el elemento seleccionado y no solo el primero	
->querySelectorAll();
	devuelve el valor en arreglos y para hacer un cambio se necesita indicar el indice

nth:child(odd);
nth:child(even);

//ejemplo querySelectorAll
var par = document.querySelectorAll('li:nth-child(odd)');
for (var i = 0; i < par.length; i++) {
  par[i].style.backgroundColor = '#f0f';
}

-> CREAR ELEMENTOS Y NODOS
//createElemen
//TagNamee
var nuevoElemento = document.createElement('etiqueta');
nuevoElemento.ClassName = 'valor';

//createTextNode
var variableNodo = document.createTextNode('valor');
nuevoElemento.appendChild(variableNodo);	->agregar un hijo a las etiqueta padre

para agregar el elemento se debe seleccionar un elemento para indicar si va antes o despues de ese elemento

var nombreVariableElemento = document.querySelector('nombreContenerdor.clase');
ejemplo
var contenedor = document.querySelector('header.container');

agregar elemento seleccionado
variablequery.insertBefore(nuevoElemento,etiqueta);
contenedor.insertBefore(nuevoDiv,h1);

EJEMPLO PRACTICO

// CREAR ELEMENTOS Y AGREGAR NODOS
//crear elementos
var container = document.createElement('div');
//crear nodos
var subtitulo = document.createTextNode('soy una creacion');
container.appendChild(subtitulo);
// console.log(container);

//agargar el elemento antes o despues en html
var agregarSubtitulo = document.querySelector('header .container'); //->SELECCIONA EL CONTENEDOR A DONDE SERA AGREGADO
var h1 = document.querySelector('h1');  // -> SELECCIONAR EL ELEMENTO A DONDE SERA COLOCADO EL NUEVO ELEMENTO
agregarSubtitulo.insertBefore(subtitulo,h1);	//AGREGAR EL ELEMENTO ANTES DE
					

				*****EVENTOS*****
onclick="Alert('texto')"
onclick="funcion()"

document.getElementById('boton').addEventListener('click', function(){
	console.log('hizo click');
});


->EJEMPLO

// EVENTOS CLICK
function isClick(){
  document.getElementById('header-title').textContent = 'A perro ya se cambio el titulo';//CAMBIAR UN ELEMENTO AL HACER CLICK
}
document.getElementById('id_button').addEventListener('click', isClick);//MANERA DE CAPTURAR LA ACCION DEL BOTON Y MANDAR A LLAMAR EL EVENTO Y LA FUNCION

//EVENTOS
form.addEventListener('submit', addItem);
lista.addEventListener('click', deleteItem);
serch.addEventListener('keyup', searchItem);


//FUNCION PARA ELIMINAR ELEMENTO
function deleteItem(e){
  if (e.target.classList.contains('eliminar')) {
    if (confirm('¿Seguro que desea eliminar el Registro?')) {
      var li = e.target.parentElement;
      lista.removeChild(li);
    }
  }
}


					***** ES6+ *****

->declaracion de variables con let y const
let es para variables
const para contantes

->bloques y alcance de las variables
todas las variables que se encuentren dentro del bloque con vet y const solo podran ser manipuladas dentro del bloque
y las que esten dentro del bloque con var, pueden ser usadas fuera del bloque

->Plantilla de cadenas mas avanzada
console.log(`(${varaible}, texto ${variable} ${funcion(argumentos)} ...)`);

->Funciones de cadenas
let nombre = 'Gus';
let apellido = 'Sol';

let nombreCompleto = `${nombre} ${apellido}`;
console.log(nombreCompleto);	=> esto mostraria en la consola Gus Sol

//Metodos para manipular las cadenas
variable.repeat(numero);	=>cosole.log(nombreCompleto.repeat(5));
variable.includes('valor');	=>console.log(nombreCompleto.includes('blo'));	-> devuelve un boolean
variable.startWith('valor');	=>console.log(nombreCompleto.startsWith('Pa'));	->si es el comienzo de una cadena y devuelve un boolean
variable.endsWith('valor');	=>console.log(nombreCompleto.endsWith('blo'));	->El final de una cadena y devuelve un boolean

->Funciones Flecha
metodo map -> permite recorrer y hacer operaciones con un arreglo
const yaers = [2000, 2015, 2351, 0255]

var edad = years.map(funtion(){

//ahora con funciones flecha
let edad = years.map(el => 2019 - el);

});

->Destructuracion o Destruccion
utilizar variables y asignareles el valor del arreglo o del objeto
const [nombre, edad] = ['Gustavo', 25];
console.log(nombre , edad);

->Objeto
const personas = {
	nombre : 'gus',
	edad : 30
}
const {nombre, edad} = persona;
console.log(nombre, edad);
//se le pueden crear alias 
const {nombre: n, edad:e} = personas;
console.log(n, e);

-> MAPAS
declaracion de mapas 
const nombre_mapa = new Map();
const datos = new Map();

para ingresar datos se utiliza el metodo set
nombre_mapa.set('key', 'valor');
datos.set('nombre', 'Gustavo');

para mostrar los datos se utiliza el metodo get
nombre_mapa.get('key');
console.log(datos.get('nombre'));

conocer el tamaño del mapa
console.log(nombre_mapa.size)

eliminar elementos del mapa
nombre_mapa(key);

eliminar todos los datos
nombre_mapa.clear();

recorrer todo le mapa
nombre_mapa.forEach((value, key) => {
	console.log(`${key} : {value}`);
});

->Operador de propagacion // Spread Operator
sintaxis
const nombre = funcion(...array);

ejemplo
const suma = (a,b,c,d) => a + b + c + d;
const valores = [10,20,30,40];

const operacion = suma(...valores);
console.log(operacion);

//unir arreglos
const array1 = [1,2,3,4];
const array2 = [100,200,300,400];

const union = [...array1, ...array2];
console.log(union);

->Objetos
//ejerccio objetos
let persona = {
  nombre : 'Gusatvo',
  edad: 21,
  ciudad: 'Puebla'
}

console.log(persona);

persona.nombre = 'Ana';
persona.edad = 22;
console.log(`${persona.nombre} tiene ${persona.edad}`);


//funciones con objetos

-> Clases y constructores 
class nombreClase{
	constructor(atributos){
		atributos y su valor
	}
}

//ejemplo
class Persona{
    constructor(nombre, edad){
        this.nombre = nombre;
        this.edad = edad;
    }
}
const persona1 = new Persona('Gustavo', 21);

console.log(persona1.nombre);


//subclases -> herencia
class ClaseHija extends ClasePadre{
	contrusctor(atributos){
		super(atributos);
		nuevosAtributos;
	}
}
//encapsulamiento


//GETTERS AND SETTERS
get nombre(){
	return valor;
}

set nombre(valor){
	this._nombre = valor;
}

//arreglos con ES6
const nombre = ['valor1', 'valor2', 'valor3',...];
nombre[indice] = nuevoValor;

.length			-> para conocer el tamaño del arreglo
.push('valor') 		-> agregar un elemento mas
.pop()			-> eliminar un elemento del arreglo
.unshift('valor')	-> agregar un elemento al inicio
.shift()		-> elimina el elemento al inicio

.splice(indice,eliminar,agregar)	->recibe tres argumentos como primero recibe la posicion
					de donde empezara a eliminar, el segundo cuantos elementos va 	
					a eliminar y el tercero es si se desea agregar uno nuevo (opcional).

//bucles con arreglos... ForEach y for
nombreArray.forEach(funcionAnonima(parametros){
	bloque de codigo;	
});

for(let i=0; i<nombre.length; i++){
	bloque de codigo;
}

ejemplo =>
const personas = ['juan', 'pedro', 'gustavo'];

personas.forEach(funtion(item, index){
	console.log(index);
	console.log(item);
});

//Busqueda
.indexOf(valor);	->persona.indexOf('gustavo'); -> devuelve la posicion
cuando no se encuentra un elemento nos devuelve -1 que equivale a un false

para buscar elementos en un objeto se utiliza:
const nombreBuscando = nombreObjeto.findIndex(funtion(elemento, index){
	return elemento.titulo === elementoBuscado;
});
-> ejemplo:
const BuscarElemento = function(arreglo, nombre){
    const buscado = arreglo.findIndex(function(elemento,index){
        return elemento.nombre === nombre;
    });
    return buscado;
}

//filtrado
nombreArray.filter(nombreArray => nobreArray.includes('letra'));

//ordenar datos
// Oredenar Arreglos simples
//console.log(personas.sort());

const numeros = [4,5,7,1,10,21,0];
//console.log(numeros.sort());  //los ordena de forma unicode 0, 1, 10, 21, 4, 5,  7

numeros.sort(function(a,b){
    if(a > b){
        return 1;
    }
    else if (a < b) {
        return -1;
    } else {
        return 0;
    }
});
//console.log(numeros);   //los ordena por compracion correctamente 0,  1,  4, 5, 7, 10, 21



					***** Promesas *****
Las pormesas nos permiten manejar los callbacks de manera mas ordenada, representa si un valor puede estar disponible ( estados )  
representa la finalizacion o el fracaso de una una promesa (el exito o el error)

new promise(ejecucion, function(resolver, rechazar){...});

